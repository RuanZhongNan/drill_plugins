//=============================================================================
// Drill_SimpleCourseA.js
//=============================================================================

/*:
 * @plugindesc [v1.0]        脚本教学 - 课程a
 * @author Drill_up
 *
 * @help
 * =============================================================================
 * +++ Drill_SimpleCourseA +++
 * 作者：Drill_up
 * =============================================================================
 * 课程：在地图界面中放一个贴图。
 * 
 * 
 * -----------------------------------------------------------------------------
 * ----更新日志
 * [v1.0]
 * 完成插件ヽ(*。>Д<)o゜
 * 
 */
 
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//		插件简称		SCA（Simple_Course_A）
//		临时全局变量	无
//		临时局部变量	无
//		存储数据变量	无
//		全局存储变量	无
//		覆盖重写方法	无
//
//插件记录：
//		★大体框架与功能如下：
//			课程A：
//				->资源文件夹脚本
//				->插件指令脚本
//				->贴图创建脚本
//				->地图界面结构
//
//		★必要注意事项：
//			1.这节课学完了就不要跑去自己写插件了，还有很多坑没讲，不要急。
//			2.插件不能单独放在一个新工程里面使用，只能放示例中。（因为引用了部分外部插件的结构）
//
//		★其它说明细节：
//			1.
//			

//=============================================================================
// ** 变量获取
//=============================================================================
	var Imported = Imported || {};					//导入识别类
	Imported.Drill_SimpleCourseA = true;			//导入的插件标记
	var DrillUp = DrillUp || {}; 											//临时全局变量中转类
	DrillUp.parameters = PluginManager.parameters('Drill_SimpleCourseA');	//读取插件管理器中的数据
	
	//（变量获取在这一章中暂时用不上，不过上面基本的四行要写上）
	
	
//=============================================================================
// ** 资源文件夹
//=============================================================================

// 》》 资源文件夹脚本
// （在这部分写课程的脚本内容）


//=============================================================================
// * 插件指令
//=============================================================================
var _drill_SCA_pluginCommand = Game_Interpreter.prototype.pluginCommand;
Game_Interpreter.prototype.pluginCommand = function(command, args) {
	_drill_SCA_pluginCommand.call(this, command, args);
	
	if (command === ">脚本教学课程A指令") {
		
		// 》》 插件指令操作部分
		// （在这部分写课程的脚本内容）
		
	}
};


//=============================================================================
// ** 地图界面
//=============================================================================

// 》》 贴图创建部分
// （在这部分写课程的脚本内容）
	
	


//这里有一个【错误的继承写法】：
//	Scene_Map.prototype.update = function() {
//		Scene_Map.prototype.update.call(this);
//		//...
//	}
//	注意，上述的写法会造成自己嵌套自己，很容易出现 callMaxStack 死循环错误。
//	
//	prototype的函数中含有另一个prototype的结构，一般【只有继承】才会用到，
//	（可以见rpg_scene的544行，Scene_Map 继承于 Scene_base 写法。）




